#! /usr/bin/python
# encoding=utf-8
EN_WHITELIST = '0123456789abcdefghijklmnopqrstuvwxyz '  # space is included in whitelist
EN_BLACKLIST = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\''

FILENAME = 'data/chat.txt'

limit = {
    'maxq': 20,
    'minq': 0,
    'maxa': 20,
    'mina': 3
}

UNK = 'unk'
VOCAB_SIZE = 6000

import itertools
import pickle

import nltk
import numpy as np


def ddefault():
    return 1


'''
 read lines from file
     return [list of lines]
'''


def read_lines(filename):
    return open(filename).read().split('\n')[:-1]


'''
 split sentences in one line
  into multiple lines
    return [list of lines]
'''


def split_line(line):
    return line.split('.')


'''
 remove anything that isn't in the vocabulary
    return str(pure ta/en)
'''


def filter_line(line, whitelist):
    return ''.join([ch for ch in line if ch in whitelist])



'''
 filter too long and too short sequences
    return tuple( filtered_ta, filtered_en )
'''


def filter_data(sequences):
    filtered_q, filtered_a = [], []
    raw_data_len = len(sequences) // 2

    for i in range(0, len(sequences), 2):
        qlen, alen = len(sequences[i].split(' ')), len(sequences[i + 1].split(' '))
        if qlen >= limit['minq'] and qlen <= limit['maxq']:
            if alen >= limit['mina'] and alen <= limit['maxa']:
                filtered_q.append(sequences[i])
                filtered_a.append(sequences[i + 1])

    # print the fraction of the original data, filtered
    filt_data_len = len(filtered_q)
    filtered = (raw_data_len - filt_data_len) * 100 / raw_data_len
    print(str(filtered) + '% filtered from original data')
    return filtered_q, filtered_a



def process_data():
    print('\n>> Read lines from file')
    lines = read_lines(filename=FILENAME)

    # change to lower case (just for en)
    lines = [line.lower() for line in lines]

    print('\n:: Sample from read(p) lines')
    print(lines[121:125])


    # filter out unnecessary characters
    print('\n>> Filter lines')
    lines = [filter_line(line, EN_WHITELIST) for line in lines]
    print(lines[121:125])
    file = open('dataclean.txt', 'wb')
    file.write(str(lines));
    file.close()
    # filter out too long or too short sequences
    print('\n>> 2nd layer of filtering')
    qlines, alines = filter_data(lines)
    file=open('dataq.txt','w')
    file.write(str(qlines));
    file.close()
    file=open('dataa.txt','w')
    file.write(str(alines));
    file.close()
if __name__ == '__main__':
    process_data()
